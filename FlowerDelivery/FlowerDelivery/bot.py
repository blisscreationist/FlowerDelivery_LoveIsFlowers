# FlowerDelivery/bot.py

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.types import FSInputFile
from datetime import datetime, timedelta

import os
import aiohttp


import requests
import json
from settings import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)  #–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DEBUG
logger = logging.getLogger(__name__)

TOKEN = BOT_TOKEN
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

STATUS_CHOICES = {
        'Ordered': '–û—Ñ–æ—Ä–º–ª–µ–Ω',
        'In Progress': '–í —Ä–∞–±–æ—Ç–µ',
        'Delivering': '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è',
        'Completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
    }

class OrderForm(StatesGroup):
    telegram_id = State()
    category = State()
    product = State()
    quantity = State()
    more_products = State()
    address = State()
    telephone = State()
    delivery_date = State()
    delivery_time = State()
    confirm_order = State()
    order_status = State()


REGISTER_URL = 'http://127.0.0.1:8000/accounts/api/register/'
@dp.message(Command("registration"))
async def registration(message: types.Message):
    telegram_id = message.from_user.id
    name = message.from_user.full_name

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    response = requests.post(REGISTER_URL, json={
        'telegram_id': telegram_id,
        'name': name
    })

    if response.status_code == 200:
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    elif response.status_code == 400 and response.json().get('error') == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç':
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}")



def is_user_registered(email):
    try:
        response = requests.get(f'http://127.0.0.1:8000/accounts/api/check_user_exists/', params={'email': email})
        response.raise_for_status()
        response_data = response.json()
        return response_data.get('exists', False), response_data.get('user_id')
    except requests.RequestException as e:
        logger.error(f"Error checking user registration: {e}")
        return False, None

def is_user_registered_tg(telegram_id):
    try:
        response = requests.get(f'http://127.0.0.1:8000/accounts/api/check_user_exists_tg/', params={'telegram_id': telegram_id})
        response.raise_for_status()
        response_data = response.json()
        return response_data.get('exists', False), response_data.get('user_id')
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False, None


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Love is Flowers Botüå∏ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –±—É–∫–µ—Ç—ã!\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ü–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /catalog.\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order."
    )


def create_confirm_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="confirm_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_no")]
        ]
    )
    return keyboard

def create_confirm_ord_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="confirm_ord_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_ord_no")]
        ]
    )
    return keyboard


def create_category_keyboard(categories):
    keyboard_buttons = []
    for category in categories:
        button = InlineKeyboardButton(
            text=category['name'],
            callback_data=f"category_{category['id']}"
        )
        keyboard_buttons.append([button])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard


def create_product_keyboard(products):
    keyboard_buttons = [
        [KeyboardButton(text=f"{product['name']} - {product['price']}")] for product in products
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)
    return keyboard


@dp.message(Command("help"))
async def send_help(message: types.Message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Å—Ç–≤—É–µ–º –í–∞—Å –≤ Love is Flowers Botüå∏!\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /catalog.\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /registration.\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /orders_list"
    )
    await message.answer(help_text)
@dp.message(Command("catalog"))
async def show_catalog(message: types.Message):
    logger.info("Received /catalog command from user %s", message.from_user.username)

    try:
        response = requests.get('http://127.0.0.1:8000/api/categories/')
        response.raise_for_status()
        categories = response.json()
        logger.info("Received categories: %s", categories)

        keyboard = create_category_keyboard(categories)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    except requests.RequestException as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to fetch categories: {e}")


@dp.message(Command("order"))
async def start_order_process(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    registered, user_id = is_user_registered_tg(telegram_id)

    if not registered:
        logger.info("–ù–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %s", registered)
        response = requests.post(REGISTER_URL, json={
            'telegram_id': telegram_id,
            'name': message.from_user.full_name
        })
        if response.status_code == 200:
            await message.answer(
                "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /order.")
            return
        else:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /registration –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

    await state.update_data(user_id=user_id)
    #await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")

    try:
        response = requests.get('http://127.0.0.1:8000/api/categories/')
        response.raise_for_status()
        categories = response.json()
        logger.info("–ü–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s", categories)

        keyboard = create_category_keyboard(categories)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
        await state.set_state(OrderForm.category)
    except requests.RequestException as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to fetch categories: {e}")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–∫–µ—Ç–æ–≤
async def download_image(url: str, filename: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º."""
    try:
        # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        save_dir = 'flowerdelivery/temp_images'  # –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(save_dir, exist_ok=True)

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    local_file_path = os.path.join(save_dir, filename)
                    with open(local_file_path, 'wb') as f:
                        f.write(await response.read())
                    return local_file_path
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

async def send_product_images(callback_query: CallbackQuery, products, bot):
    logger.debug("–§—É–Ω–∫—Ü–∏—è send_product_images –≤—ã–∑–≤–∞–Ω–∞.")
    missing_images = []

    for product in products:
        image_url = product.get('image')
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {product['name']} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {image_url}")
        if image_url:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = f"{product['id']}.jpg"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            local_file_path = await download_image(image_url, filename)
            if local_file_path:
                try:
                    # –°–æ–∑–¥–∞–µ–º FSInputFile —Å –ø—É—Ç–µ–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
                    input_file = FSInputFile(local_file_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    await bot.send_photo(
                        chat_id=callback_query.from_user.id,
                        photo=input_file,
                        caption=f"{product['name']} - {product['price']}"
                    )
                    logger.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {local_file_path}")
                    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    os.remove(local_file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {product['name']}: {e}")
                    await bot.send_message(
                        chat_id=callback_query.from_user.id,
                        text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {product['name']}: {e}"
                    )
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product['name']}")
                missing_images.append(product['name'])
        else:
            logger.warning(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product['name']}")
            missing_images.append(product['name'])

    if missing_images:
        missing_text = ", ".join(missing_images)
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_text}."
        )

    logger.debug("–§—É–Ω–∫—Ü–∏—è send_product_images –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data and c.data.startswith('category_'))
async def choose_product_for_order(callback_query: CallbackQuery, state: FSMContext):
    category_id = int(callback_query.data.split('_')[1])
    await state.update_data(category_id=category_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ ID: {category_id}")

    try:
        response = requests.get(f'http://127.0.0.1:8000/api/products/', params={'category': category_id})
        response.raise_for_status()
        products = response.json()
        logger.info("Products received: %s", products)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        existing_products = data.get('products', [])

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        combined_products = existing_products + products
        await state.update_data(products=combined_products)

        if await state.get_state() != OrderForm.category.state:
            await callback_query.answer("–í—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–∫–∞–∑–∞.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = create_product_keyboard(products)
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=keyboard)
        await state.set_state(OrderForm.product)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await send_product_images(callback_query, products, bot)

        logger.info(f"Sent product choices to user {callback_query.from_user.username}")
        await bot.answer_callback_query(callback_query.id)

    except requests.RequestException as e:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to fetch products: {e}")

@dp.message(OrderForm.product)
async def enter_quantity(message: types.Message, state: FSMContext):
    selected_product_name = message.text.split(' - ')[0]
    data = await state.get_data()
    products = data.get('products')

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {products}")

    selected_product = next((p for p in products if p['name'] == selected_product_name), None)

    if not selected_product:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä: {selected_product['name']} (ID: {selected_product['id']}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1)")

    await state.update_data(selected_product=selected_product)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_product_name}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(OrderForm.quantity)

# –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞ –≤ –∑–∞–∫–∞–∑
@dp.message(OrderForm.quantity)
async def add_more_products(message: types.Message, state: FSMContext):
    quantity = message.text
    if not quantity.isdigit() or int(quantity) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return

    data = await state.get_data()
    selected_product = data.get('selected_product')
    items = data.get('items', [])

    logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–µ—Ç: {selected_product['name']} (ID: {selected_product['id']}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})")

    items.append({
        'product': selected_product['id'],
        'quantity': int(quantity),
        'price': selected_product['price']
    })

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞
    await state.update_data(items=items)

    logger.info(f"–¢–µ–∫—É—â–∏–µ –±—É–∫–µ—Ç—ã –≤ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {items}")

    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –±—É–∫–µ—Ç?", reply_markup=create_confirm_keyboard())
    await state.set_state(OrderForm.more_products)


# –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞ –≤ –∑–∞–∫–∞–∑
@dp.callback_query(lambda c: c.data and c.data == 'confirm_yes')
async def process_more_products(callback_query: CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—É–∫–µ—Ç–∞.")

    try:
        response = requests.get('http://127.0.0.1:8000/api/categories/')
        response.raise_for_status()
        categories = response.json()
        logger.info("–ü–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s", categories)

        keyboard = create_category_keyboard(categories)
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
        await state.set_state(OrderForm.category)
    except requests.RequestException as e:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to fetch categories: {e}")

# –ö–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±—É–∫–µ—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data.startswith('category_'))
async def choose_category(callback_query: CallbackQuery, state: FSMContext):
    category_id = callback_query.data.split('_')[1]

    # –ó–∞–≥—Ä—É–∑–∫–∞ –±—É–∫–µ—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    response = requests.get(f'http://127.0.0.1:8000/api/products/?category={category_id}')
    products = response.json()

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}: {products}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(products=products)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –±—É–∫–µ—Ç–æ–≤
    await send_product_images(callback_query.from_user.id, products)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.callback_query(lambda c: c.data and c.data == 'confirm_no')
async def finalize_order_details(callback_query: CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(OrderForm.telephone)
    await bot.answer_callback_query(callback_query.id)

@dp.message(OrderForm.telephone)
async def enter_telephone(message: types.Message, state: FSMContext):
    telephone = message.text
    await state.update_data(telephone=telephone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderForm.address)

@dp.message(OrderForm.address)
async def choose_delivery_date(message: types.Message, state: FSMContext):
    address = message.text
    await state.update_data(address=address)

    today = datetime.today() + timedelta(days=1)
    dates = [today + timedelta(days=i) for i in range(8)]
    keyboard_buttons = []

    for i in range(0, len(dates), 4):
        row = [
            InlineKeyboardButton(text=f" {date.strftime('%d-%m')} ",
                                 callback_data=f"date_{date.strftime('%Y-%m-%d')}")
            for date in dates[i:i + 4]
        ]
        keyboard_buttons.append(row)

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(OrderForm.delivery_date)

@dp.callback_query(lambda c: c.data and c.data.startswith('date_'))
async def choose_delivery_time(callback_query: CallbackQuery, state: FSMContext):
    delivery_date = callback_query.data.split('_')[1]
    await state.update_data(delivery_date=delivery_date)

    hours = list(range(9, 21))
    keyboard_buttons = []
    for hour in hours:
        time_text = f"{hour:02d}:00"
        button = InlineKeyboardButton(text=f" {time_text} ", callback_data=f"time_{time_text}")
        keyboard_buttons.append(button)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        keyboard_buttons[:4],
        keyboard_buttons[4:8],
        keyboard_buttons[8:]
    ])


    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(OrderForm.delivery_time)
    await bot.answer_callback_query(callback_query.id)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
@dp.callback_query(lambda c: c.data.startswith('time_'))
async def confirm_order(callback_query: CallbackQuery, state: FSMContext):
    delivery_time = callback_query.data.split('_')[1]
    await state.update_data(delivery_time=delivery_time)

    data = await state.get_data()
    items = data.get('items', [])
    products = data.get('products', [])

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞: {items}")
    logger.info(f"–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—É–∫–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {products}")

    order_summary = (
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['telephone']}\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['address']}\n"
        f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_time']}\n\n"
        f"–í–∞—à–∏ –±—É–∫–µ—Ç—ã:\n"
    )

    for item in items:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å ID: {item['product']} –≤ —Å–ø–∏—Å–∫–µ –±—É–∫–µ—Ç–æ–≤.")
        product = next((p for p in products if str(p['id']) == str(item['product'])), None)
        if product:
            order_summary += f"{product['name']} - {item['quantity']} —à—Ç. - {item['price']} —Ä—É–±./—à—Ç.\n"
        else:
            logger.warning(f"–¢–æ–≤–∞—Ä —Å ID {item['product']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±—É–∫–µ—Ç–æ–≤.")

    total_amount = str(sum(item['quantity'] * float(item['price']) for item in items))
    order_summary += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±."

    await bot.send_message(callback_query.from_user.id, order_summary, reply_markup=create_confirm_ord_keyboard())
    await state.set_state(OrderForm.confirm_order)

# –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.callback_query(lambda c: c.data and c.data == 'confirm_ord_yes')
async def process_order(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    address = data.get('address')
    telephone = data.get('telephone')
    delivery_date = data.get('delivery_date')
    delivery_time = data.get('delivery_time')
    user_id = data.get('user_id')
    items = data.get('items')
    products = data.get('products', [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    if not items or not isinstance(items, list):
        await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
        return

    try:
        total_amount = sum(item['quantity'] * float(item['price']) for item in items)

        order_data = {
            'user': user_id,
            'delivery_date': delivery_date,
            'delivery_time': delivery_time,
            'address': address,
            'contact': '-',
            'telephone': telephone,
            'total_amount': f"{total_amount:.2f}",  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤
            'status': 'Ordered',
            'items': items
        }

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {json.dumps(order_data, indent=2)}")

        response = requests.post('http://127.0.0.1:8000/orders/api/orders/', json=order_data)
        response.raise_for_status()
        order_response = response.json()
        order_id = order_response.get('id')

        await bot.send_message(callback_query.from_user.id, f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        order_details = (
            f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {telephone}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
            f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n"
            f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_time}\n\n"
            f"–í–∞—à–∏ –±—É–∫–µ—Ç—ã:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–µ—Ç–µ
        for item in items:
            product = next((p for p in products if str(p['id']) == str(item['product'])), None)
            if product:
                order_details += (
                    f"- {product['name']} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}, "
                    f"–¶–µ–Ω–∞: {float(item['price']):,.2f} —Ä—É–±./—à—Ç.)\n"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
                )
            else:
                logger.warning(f"–¢–æ–≤–∞—Ä —Å ID {item['product']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±—É–∫–µ—Ç–æ–≤.")

        order_details += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ä—É–±."  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—É–º–º—É

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(callback_query.from_user.id, order_details)

        await state.clear()
    except requests.RequestException as e:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to create order: {e}")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await bot.answer_callback_query(callback_query.id)


@dp.callback_query(lambda c: c.data and c.data == 'confirm_ord_no')
async def cancel_order(callback_query: CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()
    await bot.answer_callback_query(callback_query.id)


@dp.message(Command("status"))
async def get_order_status(message: types.Message):
    API_URL = 'http://127.0.0.1:8000/orders/api/order_status/'

    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: /status 123")
        return

    order_id = command_parts[1]
    if not order_id.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return

    response = requests.get(f'{API_URL}{order_id}')
    if response.status_code == 200:
        data = response.json()
        status_code = data.get('status', 'Unknown')
        status_text = STATUS_CHOICES.get(status_code, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
        await message.reply(f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{data['id']}: {status_text}")
    else:
        await message.reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


API_URL = 'http://127.0.0.1:8000/orders/api/user_orders/'
@dp.message(Command('orders_list'))
async def list_orders(message: types.Message):
    telegram_id = message.from_user.id
    response = requests.get(API_URL, params={'telegram_id': telegram_id})

    if response.status_code == 200:
        orders = response.json()
        if not orders:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        orders_text = '\n'.join([
            f"–ó–∞–∫–∞–∑ ‚Ññ{order['id']}: {STATUS_CHOICES.get(order['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')} - {order['total_amount']} —Ä—É–±."
            for order in orders
        ])
        await message.reply(f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n{orders_text}")
    else:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
